{% extends "authenticated.html.jinja" %}

{% block head %}
<style>
.node {
    fill: rgb(174,199,232);
    stroke: #fff;
    stroke-width: 1.5px;
}

.link {
    fill: none;
    stroke: #999;
    stroke-width: 4px;
    cursor: default;
}
</style>
{% endblock %}

{% block page_header %}Data Source Relations{% endblock %}

{% block content %}

{#
<pre>{{ nodes|tojson|safe }}</pre>
<pre>{{ links|tojson|safe }}</pre>
#}

<div id="graph-container" style="height:500px;width:100%;"></div>

{% endblock %}

{% block scripts %}

<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.13/d3.min.js"></script>
<script>

var nodes = {{ nodes|tojson|safe }};
var links = {{ links|tojson|safe }};

var nodeIdToIndex = nodes.reduce(function(o, n, i) {
    o[n.id] = i;
    return o;
}, {});

links = links.map(function(l) {
    return { source: nodes[nodeIdToIndex[l.source]], target: nodes[nodeIdToIndex[l.target]] };
});

var width = 720;
var height = 500;

var svg = d3.select("#graph-container").append("svg")
    .attr("width", "100%")
    .attr("height", "100%")
    .attr("viewBox", "0 0 " + width + " " + height)
    .attr("preserveAspectRatio", "xMidYMid meet");

svg.append("svg:defs")
    .append("svg:marker")
        .attr("id", "end-arrow")
        .attr("viewBox", "0 -5 10 10")
        .attr("refX", 6)
        .attr("markerWidth", 3)
        .attr("markerHeight", 3)
        .attr("orient", "auto")
        .append("svg:path")
            .attr("d", "M0,-5L10,0L0,5")
            .attr("fill", "#999");

svg.append("svg:defs")
    .append("svg:marker")
        .attr("id", "start-arrow")
        .attr("viewBox", "0 -5 10 10")
        .attr("refX", 4)
        .attr("markerWidth", 3)
        .attr("markerHeight", 3)
        .attr("orient", "auto")
        .append("svg:path")
            .attr("d", "M10,-5L0,0L10,5")
            .attr("fill", "#999");

var force = d3.layout.force()
    .charge(-500)
    .linkDistance(120)
    .size([width, height]);

force
    .nodes(nodes)
    .links(links)
    .start();

var link = svg.selectAll(".link")
    .data(links)
    .enter().append("path")
        .attr("class", "link")
        .style("marker-end", "url(#end-arrow)");

var node = svg.selectAll(".node")
    .data(nodes)
    .enter().append("circle")
        .attr("class", "node")
        .attr("r", 10)
        .call(force.drag)

var labels = svg.selectAll(".label")
    .data(nodes)
    .enter().append("text")
        .attr("class", "label")
        .text(function(d) { return d.label; });

node.append("title")
    .text(function(d) { return d.label; });

force.on("tick", function() {

    link.attr("d", function(d) {
        var deltaX = d.target.x - d.source.x,
            deltaY = d.target.y - d.source.y,
            dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY),
            normX = deltaX / dist,
            normY = deltaY / dist,
            sourcePadding = 12;//d.left ? 17 : 12,
            targetPadding = 17;//d.right ? 17 : 12,
            sourceX = d.source.x + (sourcePadding * normX),
            sourceY = d.source.y + (sourcePadding * normY),
            targetX = d.target.x - (targetPadding * normX),
            targetY = d.target.y - (targetPadding * normY);
        return "M" + sourceX + "," + sourceY + "L" + targetX + "," + targetY;
    });

    node.attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; });

    labels
        .attr("x", function(d) { return d.x; })
        .attr("y", function(d) { return d.y;})
});

</script>

{% endblock %}
